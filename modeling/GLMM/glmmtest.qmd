---
title: "glmms"
format: html
editor: visual
---

```{r setup, include = FALSE}
library(RSQLite)
library(glmnet)
library(dplyr)
library(purrr)
library(tidyr)
library(lme4)
# Connect to your SQLite DB file
con <- dbConnect(RSQLite::SQLite(), "C:/sqlite/exploration.db")
```



```{r}
dbListFields(con, "ACGR")

df_sample<- dbGetQuery(con, "
  SELECT Year, cdsCode, RegHSDiplomaRate, ReportingCategory, UniReqsPercent, RegHSDiploma, ExemptionRate, MeritRate, CPPRate, BiliteracyRate, CharterSchool FROM ACGR;
")
# Check if there are NAs in the relevant columns
colSums(is.na(df[, c("RegHSDiplomaRate", "UniReqsPercent", "RegHSDiploma", "ExemptionRate", "MeritRate", "ReportingCategory", "Year")]))

#set.seed(123)  # For reproducibility
#df_sample <- df[sample(nrow(df), size = nrow(df) * 0.1), ]
#nrow(df_sample)

df_sample_cleaned <- df_sample %>%
  filter(!apply(df_sample, 1, function(row) any(row == "*")))

head(df_sample_cleaned)
class(df_sample_cleaned$Year)
#df_sample_cleaned$Year <- as.numeric(df_sample_cleaned$Year)
df_sample_cleaned[df_sample_cleaned$Year == "2016-17",]$Year <- 2016
df_sample_cleaned[df_sample_cleaned$Year == "2017-18",]$Year <- 2017
df_sample_cleaned[df_sample_cleaned$Year == "2018-19",]$Year <- 2018
df_sample_cleaned[df_sample_cleaned$Year == "2019-20",]$Year <- 2019
df_sample_cleaned[df_sample_cleaned$Year == "2020-21",]$Year <- 2020
df_sample_cleaned[df_sample_cleaned$Year == "2021-22",]$Year <- 2021
df_sample_cleaned[df_sample_cleaned$Year == "2022-23",]$Year <- 2022
df_sample_cleaned[df_sample_cleaned$Year == "2023-24",]$Year <- 2023
df_sample_cleaned$Year <- as.integer(df_sample_cleaned$Year)
df_sample_cleaned$RegHSDiplomaRate <- as.numeric(df_sample_cleaned$RegHSDiplomaRate)
df_sample_cleaned$MeritRate <- as.numeric(df_sample_cleaned$MeritRate)
df_sample_cleaned$UniReqsPercent <- as.numeric(df_sample_cleaned$UniReqsPercent)
df_sample_cleaned$ExemptionRate <- as.numeric(df_sample_cleaned$ExemptionRate)
df_sample_cleaned$CPPRate <- as.numeric(df_sample_cleaned$CPPRate)
df_sample_cleaned$BiliteracyRate <- as.numeric(df_sample_cleaned$BiliteracyRate)

df_sample_cleaned$ReportingCategory <- factor(df_sample_cleaned$ReportingCategory)
df_sample_cleaned$ReportingCategory <- relevel(df_sample_cleaned$ReportingCategory, ref = "TA")

glmm_model <- lmer(RegHSDiplomaRate ~ Year +  MeritRate + ExemptionRate + UniReqsPercent+ ReportingCategory + BiliteracyRate + CPPRate + CharterSchool+(1 | cdsCode),
                    data = df_sample_cleaned)

# Model summary
summary(glmm_model)
df_filtered <- df_sample_cleaned %>% 
  filter(ReportingCategory == "TA")
glmm_modelTA <- lmer(RegHSDiplomaRate ~ MeritRate + ExemptionRate + UniReqsPercent + (1 | cdsCode),
                    data = df_sample_cleaned) 

# Model summary
summary(glmm_modelTA)
```


```{r}
library(broom.mixed)
library(ggplot2)

# Tidy the model
tidy_coefs <- broom.mixed::tidy(glmm_model, effects = "fixed", conf.int = TRUE)
tidy_coefs_no_intercept <- tidy_coefs %>%
  filter(term != "(Intercept)") %>%
  mutate(sig = ifelse(conf.low > 0 | conf.high < 0, "Significant", "Not Significant"))
head(tidy_coefs_no_intercept)

ggplot(tidy_coefs_no_intercept, aes(x = estimate, y = term, color = sig)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  scale_color_manual(values = c("Significant" = "steelblue", "Not Significant" = "gray")) +
  labs(title = "Fixed Effects from GLMM",
       x = "Estimate", y = "Term") +
  theme_minimal()

```
```{r}
glmm_model_i <- lmer(RegHSDiplomaRate ~ Year+ MeritRate+  MeritRate*ReportingCategory+(1 | cdsCode),
                    data = df_sample_cleaned)

# Model summary
summary(glmm_model_i)

tidy_coefs_i <- broom.mixed::tidy(glmm_model_i, effects = "fixed", conf.int = TRUE)
tidy_coefs_no_intercept_i <- tidy_coefs_i %>%
  filter(term != "(Intercept)") %>%
  filter(grepl(":", term) | grepl("\\*", term)) %>%
  mutate(sig = ifelse(conf.low > 0 | conf.high < 0, "Significant", "Not Significant"))
head(tidy_coefs_no_intercept)

ggplot(tidy_coefs_no_intercept_i, aes(x = estimate, y = term, color = sig)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  scale_color_manual(values = c("Significant" = "steelblue", "Not Significant" = "gray")) +
  labs(title = "Merit Interactions",
       x = "Estimate", y = "Term") +
  theme_minimal()

glmm_model_i2 <- lmer(RegHSDiplomaRate ~ Year+ CPPRate+  CPPRate*ReportingCategory+(1 | cdsCode),
                    data = df_sample_cleaned)

# Model summary
summary(glmm_model_i2)

tidy_coefs_i2 <- broom.mixed::tidy(glmm_model_i2, effects = "fixed", conf.int = TRUE)
tidy_coefs_no_intercept_i2 <- tidy_coefs_i2 %>%
  filter(term != "(Intercept)") %>%
  filter(grepl(":", term) | grepl("\\*", term)) %>%
  mutate(sig = ifelse(conf.low > 0 | conf.high < 0, "Significant", "Not Significant"))
head(tidy_coefs_no_intercept)

ggplot(tidy_coefs_no_intercept_i2, aes(x = estimate, y = term, color = sig)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  scale_color_manual(values = c("Significant" = "steelblue", "Not Significant" = "gray")) +
  labs(title = "CPP Interactions",
       x = "Estimate", y = "Term") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 12),  # Increase label size on y-axis
        plot.title = element_text(size = 14, face = "bold"),  # Larger title
        axis.title = element_text(size = 12)) + 
  geom_text(aes(label = term), 
            size = .1,  # Adjust text size
            nudge_y = 0.2,  # Nudge the labels to avoid overlap
            check_overlap = TRUE)  # Prevent overlap of labels

glmm_model_i3 <- lmer(RegHSDiplomaRate ~ Year+ BiliteracyRate+  BiliteracyRate*ReportingCategory+(1 | cdsCode),
                    data = df_sample_cleaned)

# Model summary
summary(glmm_model_i3)

tidy_coefs_i3 <- broom.mixed::tidy(glmm_model_i3, effects = "fixed", conf.int = TRUE)
tidy_coefs_no_intercept_i3 <- tidy_coefs_i3 %>%
  filter(term != "(Intercept)") %>%
  filter(grepl(":", term) | grepl("\\*", term)) %>%
  mutate(sig = ifelse(conf.low > 0 | conf.high < 0, "Significant", "Not Significant"))
head(tidy_coefs_no_intercept)

ggplot(tidy_coefs_no_intercept_i3, aes(x = estimate, y = term, color = sig)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
  scale_color_manual(values = c("Significant" = "steelblue", "Not Significant" = "gray")) +
  labs(title = "Biliteracy Interactions",
       x = "Estimate", y = "Term") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 12),  # Increase label size on y-axis
        plot.title = element_text(size = 14, face = "bold"),  # Larger title
        axis.title = element_text(size = 12)) + 
  geom_text(aes(label = term), 
            size = .1,  # Adjust text size
            nudge_y = 0.2,  # Nudge the labels to avoid overlap
            check_overlap = TRUE)  # Prevent overlap of labels
```

```{r}
dbDisconnect(con)
con <- dbConnect(RSQLite::SQLite(), "C:/sqlite/staff_assignment.db")
staffdf<- dbGetQuery(con, "
  SELECT * FROM  StaffAssignment;
")
staffdf$combinedCode <- paste0(staffdf$DistrictCode, staffdf$Schoolcode)

head(staffdf,50)
nrow(staffdf)
summary(staffdf$EstimatedFTE)
staffdf %>%
  count(AcademicYear, sort = TRUE)
plot(density(staffdf$EstimatedFTE, na.rm = TRUE),
     main = "Density Plot of Estimated FTE",
     xlab = "Estimated FTE",
     col = "darkblue",
     lwd = 2)

staffdf<- dbGetQuery(con, "
  SELECT RecID, DistrictCode, Schoolcode, EstimatedFTE FROM  StaffAssignment;
")
staffdf$cdsCode <- paste0(staffdf$DistrictCode, staffdf$Schoolcode)
# Assuming your data frame is named 'df'
df_aggregated <- staffdf %>%
  group_by(cdsCode, RecID) %>%
  summarise(AvgFTE = mean(EstimatedFTE, na.rm = TRUE), .groups = "drop")
head(df_aggregated,50)
df_aggregated %>% 
  filter(AvgFTE!=100) %>%
  head(500)
df_aggregated <- df_aggregated %>%
  group_by(cdsCode) %>%
  summarise(TotalFTE = sum(AvgFTE, na.rm = TRUE), .groups = "drop")

nrow(df_aggregated)



filtered <- df_sample_cleaned[df_sample_cleaned$ReportingCategory == "TA", ]
df_aggregated$cdsCode <- as.integer64(df_aggregated$cdsCode)
head(df_sample_cleaned)
head(filtered$cdsCode)
head(df_aggregated,50)
joined <- filtered %>%
  inner_join(df_aggregated, by = "cdsCode")
nrow(joined)
head(joined)
nrow(df_aggregated)
nrow(filtered)
sum(nchar(as.character(df_sample_cleaned$cdsCode)) == 14, na.rm = TRUE)
glmm_modelFTE <- lmer(RegHSDiplomaRate ~ TotalFTE+(1 | cdsCode),
                    data = joined)
summary(glmm_modelFTE)

glmm_modelFTE2 <- lmer(UniReqsPercent ~ TotalFTE+(1 | cdsCode),
                    data = joined)
summary(glmm_modelFTE2)
```
joined <- df_sample_cleaned %>%
  inner_join(staffdf, by = "Schoolcode")


